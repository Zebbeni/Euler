// unneccessarily tried to optimize to avoid extra multiplication.
// would work better if given a string with fewer zeros

package main

import "fmt"

const source = ``

func main() {
	numbers := parseToIntSlice(source)
	length := 13
	current := prod(numbers[0:length])
	max := current
	for i := length + 1; i <= len(numbers); i++ {
		current = makenext(current, numbers[i-length-1:i])
		if current > max {
			max = current
		}
	}
	fmt.Println("max:", max)
}

func makenext(cur uint64, nums []uint64) uint64 {
	if nums[0] == 0 {
		return prod(nums[1:len(nums)])
	}
	return cur * nums[len(nums)-1] / nums[0]
}

func prod(nums []uint64) uint64 {
	mult := uint64(1)
	for i := 0; i < len(nums); i++ {
		mult *= nums[i]
	}
	return mult
}

func parseToIntSlice(s string) []uint64 {
	nums := make([]uint64, len(s))
	byteslice := []rune(s)
	for i := 0; i < len(s); i++ {
		nums[i] = uint64(byteslice[i] - '0')
	}
	return nums
}
